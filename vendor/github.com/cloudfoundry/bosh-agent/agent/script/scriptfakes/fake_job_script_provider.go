// Code generated by counterfeiter. DO NOT EDIT.
package scriptfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-agent/agent/script"
	boshdrain "github.com/cloudfoundry/bosh-agent/agent/script/drain"
)

type FakeJobScriptProvider struct {
	NewScriptStub        func(jobName string, scriptName string) script.Script
	newScriptMutex       sync.RWMutex
	newScriptArgsForCall []struct {
		jobName    string
		scriptName string
	}
	newScriptReturns struct {
		result1 script.Script
	}
	newScriptReturnsOnCall map[int]struct {
		result1 script.Script
	}
	NewDrainScriptStub        func(jobName string, params boshdrain.ScriptParams) script.CancellableScript
	newDrainScriptMutex       sync.RWMutex
	newDrainScriptArgsForCall []struct {
		jobName string
		params  boshdrain.ScriptParams
	}
	newDrainScriptReturns struct {
		result1 script.CancellableScript
	}
	newDrainScriptReturnsOnCall map[int]struct {
		result1 script.CancellableScript
	}
	NewParallelScriptStub        func(scriptName string, scripts []script.Script) script.CancellableScript
	newParallelScriptMutex       sync.RWMutex
	newParallelScriptArgsForCall []struct {
		scriptName string
		scripts    []script.Script
	}
	newParallelScriptReturns struct {
		result1 script.CancellableScript
	}
	newParallelScriptReturnsOnCall map[int]struct {
		result1 script.CancellableScript
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJobScriptProvider) NewScript(jobName string, scriptName string) script.Script {
	fake.newScriptMutex.Lock()
	ret, specificReturn := fake.newScriptReturnsOnCall[len(fake.newScriptArgsForCall)]
	fake.newScriptArgsForCall = append(fake.newScriptArgsForCall, struct {
		jobName    string
		scriptName string
	}{jobName, scriptName})
	fake.recordInvocation("NewScript", []interface{}{jobName, scriptName})
	fake.newScriptMutex.Unlock()
	if fake.NewScriptStub != nil {
		return fake.NewScriptStub(jobName, scriptName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newScriptReturns.result1
}

func (fake *FakeJobScriptProvider) NewScriptCallCount() int {
	fake.newScriptMutex.RLock()
	defer fake.newScriptMutex.RUnlock()
	return len(fake.newScriptArgsForCall)
}

func (fake *FakeJobScriptProvider) NewScriptArgsForCall(i int) (string, string) {
	fake.newScriptMutex.RLock()
	defer fake.newScriptMutex.RUnlock()
	return fake.newScriptArgsForCall[i].jobName, fake.newScriptArgsForCall[i].scriptName
}

func (fake *FakeJobScriptProvider) NewScriptReturns(result1 script.Script) {
	fake.NewScriptStub = nil
	fake.newScriptReturns = struct {
		result1 script.Script
	}{result1}
}

func (fake *FakeJobScriptProvider) NewScriptReturnsOnCall(i int, result1 script.Script) {
	fake.NewScriptStub = nil
	if fake.newScriptReturnsOnCall == nil {
		fake.newScriptReturnsOnCall = make(map[int]struct {
			result1 script.Script
		})
	}
	fake.newScriptReturnsOnCall[i] = struct {
		result1 script.Script
	}{result1}
}

func (fake *FakeJobScriptProvider) NewDrainScript(jobName string, params boshdrain.ScriptParams) script.CancellableScript {
	fake.newDrainScriptMutex.Lock()
	ret, specificReturn := fake.newDrainScriptReturnsOnCall[len(fake.newDrainScriptArgsForCall)]
	fake.newDrainScriptArgsForCall = append(fake.newDrainScriptArgsForCall, struct {
		jobName string
		params  boshdrain.ScriptParams
	}{jobName, params})
	fake.recordInvocation("NewDrainScript", []interface{}{jobName, params})
	fake.newDrainScriptMutex.Unlock()
	if fake.NewDrainScriptStub != nil {
		return fake.NewDrainScriptStub(jobName, params)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newDrainScriptReturns.result1
}

func (fake *FakeJobScriptProvider) NewDrainScriptCallCount() int {
	fake.newDrainScriptMutex.RLock()
	defer fake.newDrainScriptMutex.RUnlock()
	return len(fake.newDrainScriptArgsForCall)
}

func (fake *FakeJobScriptProvider) NewDrainScriptArgsForCall(i int) (string, boshdrain.ScriptParams) {
	fake.newDrainScriptMutex.RLock()
	defer fake.newDrainScriptMutex.RUnlock()
	return fake.newDrainScriptArgsForCall[i].jobName, fake.newDrainScriptArgsForCall[i].params
}

func (fake *FakeJobScriptProvider) NewDrainScriptReturns(result1 script.CancellableScript) {
	fake.NewDrainScriptStub = nil
	fake.newDrainScriptReturns = struct {
		result1 script.CancellableScript
	}{result1}
}

func (fake *FakeJobScriptProvider) NewDrainScriptReturnsOnCall(i int, result1 script.CancellableScript) {
	fake.NewDrainScriptStub = nil
	if fake.newDrainScriptReturnsOnCall == nil {
		fake.newDrainScriptReturnsOnCall = make(map[int]struct {
			result1 script.CancellableScript
		})
	}
	fake.newDrainScriptReturnsOnCall[i] = struct {
		result1 script.CancellableScript
	}{result1}
}

func (fake *FakeJobScriptProvider) NewParallelScript(scriptName string, scripts []script.Script) script.CancellableScript {
	var scriptsCopy []script.Script
	if scripts != nil {
		scriptsCopy = make([]script.Script, len(scripts))
		copy(scriptsCopy, scripts)
	}
	fake.newParallelScriptMutex.Lock()
	ret, specificReturn := fake.newParallelScriptReturnsOnCall[len(fake.newParallelScriptArgsForCall)]
	fake.newParallelScriptArgsForCall = append(fake.newParallelScriptArgsForCall, struct {
		scriptName string
		scripts    []script.Script
	}{scriptName, scriptsCopy})
	fake.recordInvocation("NewParallelScript", []interface{}{scriptName, scriptsCopy})
	fake.newParallelScriptMutex.Unlock()
	if fake.NewParallelScriptStub != nil {
		return fake.NewParallelScriptStub(scriptName, scripts)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newParallelScriptReturns.result1
}

func (fake *FakeJobScriptProvider) NewParallelScriptCallCount() int {
	fake.newParallelScriptMutex.RLock()
	defer fake.newParallelScriptMutex.RUnlock()
	return len(fake.newParallelScriptArgsForCall)
}

func (fake *FakeJobScriptProvider) NewParallelScriptArgsForCall(i int) (string, []script.Script) {
	fake.newParallelScriptMutex.RLock()
	defer fake.newParallelScriptMutex.RUnlock()
	return fake.newParallelScriptArgsForCall[i].scriptName, fake.newParallelScriptArgsForCall[i].scripts
}

func (fake *FakeJobScriptProvider) NewParallelScriptReturns(result1 script.CancellableScript) {
	fake.NewParallelScriptStub = nil
	fake.newParallelScriptReturns = struct {
		result1 script.CancellableScript
	}{result1}
}

func (fake *FakeJobScriptProvider) NewParallelScriptReturnsOnCall(i int, result1 script.CancellableScript) {
	fake.NewParallelScriptStub = nil
	if fake.newParallelScriptReturnsOnCall == nil {
		fake.newParallelScriptReturnsOnCall = make(map[int]struct {
			result1 script.CancellableScript
		})
	}
	fake.newParallelScriptReturnsOnCall[i] = struct {
		result1 script.CancellableScript
	}{result1}
}

func (fake *FakeJobScriptProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newScriptMutex.RLock()
	defer fake.newScriptMutex.RUnlock()
	fake.newDrainScriptMutex.RLock()
	defer fake.newDrainScriptMutex.RUnlock()
	fake.newParallelScriptMutex.RLock()
	defer fake.newParallelScriptMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJobScriptProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ script.JobScriptProvider = new(FakeJobScriptProvider)
