// This file was generated by counterfeiter
package fakes

import "sync"

type Extractor struct {
	ExtractWindowsFSReleaseStub        func(inputTile, outputDir string) (string, error)
	extractWindowsFSReleaseMutex       sync.RWMutex
	extractWindowsFSReleaseArgsForCall []struct {
		inputTile string
		outputDir string
	}
	extractWindowsFSReleaseReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Extractor) ExtractWindowsFSRelease(inputTile string, outputDir string) (string, error) {
	fake.extractWindowsFSReleaseMutex.Lock()
	fake.extractWindowsFSReleaseArgsForCall = append(fake.extractWindowsFSReleaseArgsForCall, struct {
		inputTile string
		outputDir string
	}{inputTile, outputDir})
	fake.recordInvocation("ExtractWindowsFSRelease", []interface{}{inputTile, outputDir})
	fake.extractWindowsFSReleaseMutex.Unlock()
	if fake.ExtractWindowsFSReleaseStub != nil {
		return fake.ExtractWindowsFSReleaseStub(inputTile, outputDir)
	} else {
		return fake.extractWindowsFSReleaseReturns.result1, fake.extractWindowsFSReleaseReturns.result2
	}
}

func (fake *Extractor) ExtractWindowsFSReleaseCallCount() int {
	fake.extractWindowsFSReleaseMutex.RLock()
	defer fake.extractWindowsFSReleaseMutex.RUnlock()
	return len(fake.extractWindowsFSReleaseArgsForCall)
}

func (fake *Extractor) ExtractWindowsFSReleaseArgsForCall(i int) (string, string) {
	fake.extractWindowsFSReleaseMutex.RLock()
	defer fake.extractWindowsFSReleaseMutex.RUnlock()
	return fake.extractWindowsFSReleaseArgsForCall[i].inputTile, fake.extractWindowsFSReleaseArgsForCall[i].outputDir
}

func (fake *Extractor) ExtractWindowsFSReleaseReturns(result1 string, result2 error) {
	fake.ExtractWindowsFSReleaseStub = nil
	fake.extractWindowsFSReleaseReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Extractor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.extractWindowsFSReleaseMutex.RLock()
	defer fake.extractWindowsFSReleaseMutex.RUnlock()
	return fake.invocations
}

func (fake *Extractor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
