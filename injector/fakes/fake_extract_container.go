// This file was generated by counterfeiter
package fakes

import (
	"archive/zip"
	"io"
	"os"
	"sync"

	"github.com/pivotal-cf/winfs-injector/injector"
)

type FakeExtractContainer struct {
	OpenReaderStub        func(string) (*zip.ReadCloser, error)
	openReaderMutex       sync.RWMutex
	openReaderArgsForCall []struct {
		arg1 string
	}
	openReaderReturns struct {
		result1 *zip.ReadCloser
		result2 error
	}
	TempDirStub        func(string, string) (string, error)
	tempDirMutex       sync.RWMutex
	tempDirArgsForCall []struct {
		arg1 string
		arg2 string
	}
	tempDirReturns struct {
		result1 string
		result2 error
	}
	MkdirAllStub        func(path string, perm os.FileMode) error
	mkdirAllMutex       sync.RWMutex
	mkdirAllArgsForCall []struct {
		path string
		perm os.FileMode
	}
	mkdirAllReturns struct {
		result1 error
	}
	OpenFileStub        func(name string, flag int, perm os.FileMode) (*os.File, error)
	openFileMutex       sync.RWMutex
	openFileArgsForCall []struct {
		name string
		flag int
		perm os.FileMode
	}
	openFileReturns struct {
		result1 *os.File
		result2 error
	}
	CopyStub        func(dst io.Writer, src io.Reader) (written int64, err error)
	copyMutex       sync.RWMutex
	copyArgsForCall []struct {
		dst io.Writer
		src io.Reader
	}
	copyReturns struct {
		result1 int64
		result2 error
	}
	MatchStub        func(pattern, name string) (matched bool, err error)
	matchMutex       sync.RWMutex
	matchArgsForCall []struct {
		pattern string
		name    string
	}
	matchReturns struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExtractContainer) OpenReader(arg1 string) (*zip.ReadCloser, error) {
	fake.openReaderMutex.Lock()
	fake.openReaderArgsForCall = append(fake.openReaderArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("OpenReader", []interface{}{arg1})
	fake.openReaderMutex.Unlock()
	if fake.OpenReaderStub != nil {
		return fake.OpenReaderStub(arg1)
	} else {
		return fake.openReaderReturns.result1, fake.openReaderReturns.result2
	}
}

func (fake *FakeExtractContainer) OpenReaderCallCount() int {
	fake.openReaderMutex.RLock()
	defer fake.openReaderMutex.RUnlock()
	return len(fake.openReaderArgsForCall)
}

func (fake *FakeExtractContainer) OpenReaderArgsForCall(i int) string {
	fake.openReaderMutex.RLock()
	defer fake.openReaderMutex.RUnlock()
	return fake.openReaderArgsForCall[i].arg1
}

func (fake *FakeExtractContainer) OpenReaderReturns(result1 *zip.ReadCloser, result2 error) {
	fake.OpenReaderStub = nil
	fake.openReaderReturns = struct {
		result1 *zip.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeExtractContainer) TempDir(arg1 string, arg2 string) (string, error) {
	fake.tempDirMutex.Lock()
	fake.tempDirArgsForCall = append(fake.tempDirArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("TempDir", []interface{}{arg1, arg2})
	fake.tempDirMutex.Unlock()
	if fake.TempDirStub != nil {
		return fake.TempDirStub(arg1, arg2)
	} else {
		return fake.tempDirReturns.result1, fake.tempDirReturns.result2
	}
}

func (fake *FakeExtractContainer) TempDirCallCount() int {
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	return len(fake.tempDirArgsForCall)
}

func (fake *FakeExtractContainer) TempDirArgsForCall(i int) (string, string) {
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	return fake.tempDirArgsForCall[i].arg1, fake.tempDirArgsForCall[i].arg2
}

func (fake *FakeExtractContainer) TempDirReturns(result1 string, result2 error) {
	fake.TempDirStub = nil
	fake.tempDirReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeExtractContainer) MkdirAll(path string, perm os.FileMode) error {
	fake.mkdirAllMutex.Lock()
	fake.mkdirAllArgsForCall = append(fake.mkdirAllArgsForCall, struct {
		path string
		perm os.FileMode
	}{path, perm})
	fake.recordInvocation("MkdirAll", []interface{}{path, perm})
	fake.mkdirAllMutex.Unlock()
	if fake.MkdirAllStub != nil {
		return fake.MkdirAllStub(path, perm)
	} else {
		return fake.mkdirAllReturns.result1
	}
}

func (fake *FakeExtractContainer) MkdirAllCallCount() int {
	fake.mkdirAllMutex.RLock()
	defer fake.mkdirAllMutex.RUnlock()
	return len(fake.mkdirAllArgsForCall)
}

func (fake *FakeExtractContainer) MkdirAllArgsForCall(i int) (string, os.FileMode) {
	fake.mkdirAllMutex.RLock()
	defer fake.mkdirAllMutex.RUnlock()
	return fake.mkdirAllArgsForCall[i].path, fake.mkdirAllArgsForCall[i].perm
}

func (fake *FakeExtractContainer) MkdirAllReturns(result1 error) {
	fake.MkdirAllStub = nil
	fake.mkdirAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeExtractContainer) OpenFile(name string, flag int, perm os.FileMode) (*os.File, error) {
	fake.openFileMutex.Lock()
	fake.openFileArgsForCall = append(fake.openFileArgsForCall, struct {
		name string
		flag int
		perm os.FileMode
	}{name, flag, perm})
	fake.recordInvocation("OpenFile", []interface{}{name, flag, perm})
	fake.openFileMutex.Unlock()
	if fake.OpenFileStub != nil {
		return fake.OpenFileStub(name, flag, perm)
	} else {
		return fake.openFileReturns.result1, fake.openFileReturns.result2
	}
}

func (fake *FakeExtractContainer) OpenFileCallCount() int {
	fake.openFileMutex.RLock()
	defer fake.openFileMutex.RUnlock()
	return len(fake.openFileArgsForCall)
}

func (fake *FakeExtractContainer) OpenFileArgsForCall(i int) (string, int, os.FileMode) {
	fake.openFileMutex.RLock()
	defer fake.openFileMutex.RUnlock()
	return fake.openFileArgsForCall[i].name, fake.openFileArgsForCall[i].flag, fake.openFileArgsForCall[i].perm
}

func (fake *FakeExtractContainer) OpenFileReturns(result1 *os.File, result2 error) {
	fake.OpenFileStub = nil
	fake.openFileReturns = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *FakeExtractContainer) Copy(dst io.Writer, src io.Reader) (written int64, err error) {
	fake.copyMutex.Lock()
	fake.copyArgsForCall = append(fake.copyArgsForCall, struct {
		dst io.Writer
		src io.Reader
	}{dst, src})
	fake.recordInvocation("Copy", []interface{}{dst, src})
	fake.copyMutex.Unlock()
	if fake.CopyStub != nil {
		return fake.CopyStub(dst, src)
	} else {
		return fake.copyReturns.result1, fake.copyReturns.result2
	}
}

func (fake *FakeExtractContainer) CopyCallCount() int {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	return len(fake.copyArgsForCall)
}

func (fake *FakeExtractContainer) CopyArgsForCall(i int) (io.Writer, io.Reader) {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	return fake.copyArgsForCall[i].dst, fake.copyArgsForCall[i].src
}

func (fake *FakeExtractContainer) CopyReturns(result1 int64, result2 error) {
	fake.CopyStub = nil
	fake.copyReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeExtractContainer) Match(pattern string, name string) (matched bool, err error) {
	fake.matchMutex.Lock()
	fake.matchArgsForCall = append(fake.matchArgsForCall, struct {
		pattern string
		name    string
	}{pattern, name})
	fake.recordInvocation("Match", []interface{}{pattern, name})
	fake.matchMutex.Unlock()
	if fake.MatchStub != nil {
		return fake.MatchStub(pattern, name)
	} else {
		return fake.matchReturns.result1, fake.matchReturns.result2
	}
}

func (fake *FakeExtractContainer) MatchCallCount() int {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	return len(fake.matchArgsForCall)
}

func (fake *FakeExtractContainer) MatchArgsForCall(i int) (string, string) {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	return fake.matchArgsForCall[i].pattern, fake.matchArgsForCall[i].name
}

func (fake *FakeExtractContainer) MatchReturns(result1 bool, result2 error) {
	fake.MatchStub = nil
	fake.matchReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeExtractContainer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openReaderMutex.RLock()
	defer fake.openReaderMutex.RUnlock()
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	fake.mkdirAllMutex.RLock()
	defer fake.mkdirAllMutex.RUnlock()
	fake.openFileMutex.RLock()
	defer fake.openFileMutex.RUnlock()
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeExtractContainer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ injector.ExtractContainer = new(FakeExtractContainer)
