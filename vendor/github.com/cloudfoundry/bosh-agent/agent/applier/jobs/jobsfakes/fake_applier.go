// This file was generated by counterfeiter
package jobsfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-agent/agent/applier/jobs"
	"github.com/cloudfoundry/bosh-agent/agent/applier/models"
)

type FakeApplier struct {
	PrepareStub        func(job models.Job) error
	prepareMutex       sync.RWMutex
	prepareArgsForCall []struct {
		job models.Job
	}
	prepareReturns struct {
		result1 error
	}
	ApplyStub        func(job models.Job) error
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		job models.Job
	}
	applyReturns struct {
		result1 error
	}
	ConfigureStub        func(job models.Job, jobIndex int) error
	configureMutex       sync.RWMutex
	configureArgsForCall []struct {
		job      models.Job
		jobIndex int
	}
	configureReturns struct {
		result1 error
	}
	KeepOnlyStub        func(jobs []models.Job) error
	keepOnlyMutex       sync.RWMutex
	keepOnlyArgsForCall []struct {
		jobs []models.Job
	}
	keepOnlyReturns struct {
		result1 error
	}
	CreateDirectoriesStub        func(job models.Job, baseDir string) error
	createDirectoriesMutex       sync.RWMutex
	createDirectoriesArgsForCall []struct {
		job     models.Job
		baseDir string
	}
	createDirectoriesReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeApplier) Prepare(job models.Job) error {
	fake.prepareMutex.Lock()
	fake.prepareArgsForCall = append(fake.prepareArgsForCall, struct {
		job models.Job
	}{job})
	fake.recordInvocation("Prepare", []interface{}{job})
	fake.prepareMutex.Unlock()
	if fake.PrepareStub != nil {
		return fake.PrepareStub(job)
	} else {
		return fake.prepareReturns.result1
	}
}

func (fake *FakeApplier) PrepareCallCount() int {
	fake.prepareMutex.RLock()
	defer fake.prepareMutex.RUnlock()
	return len(fake.prepareArgsForCall)
}

func (fake *FakeApplier) PrepareArgsForCall(i int) models.Job {
	fake.prepareMutex.RLock()
	defer fake.prepareMutex.RUnlock()
	return fake.prepareArgsForCall[i].job
}

func (fake *FakeApplier) PrepareReturns(result1 error) {
	fake.PrepareStub = nil
	fake.prepareReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeApplier) Apply(job models.Job) error {
	fake.applyMutex.Lock()
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		job models.Job
	}{job})
	fake.recordInvocation("Apply", []interface{}{job})
	fake.applyMutex.Unlock()
	if fake.ApplyStub != nil {
		return fake.ApplyStub(job)
	} else {
		return fake.applyReturns.result1
	}
}

func (fake *FakeApplier) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeApplier) ApplyArgsForCall(i int) models.Job {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.applyArgsForCall[i].job
}

func (fake *FakeApplier) ApplyReturns(result1 error) {
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeApplier) Configure(job models.Job, jobIndex int) error {
	fake.configureMutex.Lock()
	fake.configureArgsForCall = append(fake.configureArgsForCall, struct {
		job      models.Job
		jobIndex int
	}{job, jobIndex})
	fake.recordInvocation("Configure", []interface{}{job, jobIndex})
	fake.configureMutex.Unlock()
	if fake.ConfigureStub != nil {
		return fake.ConfigureStub(job, jobIndex)
	} else {
		return fake.configureReturns.result1
	}
}

func (fake *FakeApplier) ConfigureCallCount() int {
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	return len(fake.configureArgsForCall)
}

func (fake *FakeApplier) ConfigureArgsForCall(i int) (models.Job, int) {
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	return fake.configureArgsForCall[i].job, fake.configureArgsForCall[i].jobIndex
}

func (fake *FakeApplier) ConfigureReturns(result1 error) {
	fake.ConfigureStub = nil
	fake.configureReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeApplier) KeepOnly(jobs []models.Job) error {
	var jobsCopy []models.Job
	if jobs != nil {
		jobsCopy = make([]models.Job, len(jobs))
		copy(jobsCopy, jobs)
	}
	fake.keepOnlyMutex.Lock()
	fake.keepOnlyArgsForCall = append(fake.keepOnlyArgsForCall, struct {
		jobs []models.Job
	}{jobsCopy})
	fake.recordInvocation("KeepOnly", []interface{}{jobsCopy})
	fake.keepOnlyMutex.Unlock()
	if fake.KeepOnlyStub != nil {
		return fake.KeepOnlyStub(jobs)
	} else {
		return fake.keepOnlyReturns.result1
	}
}

func (fake *FakeApplier) KeepOnlyCallCount() int {
	fake.keepOnlyMutex.RLock()
	defer fake.keepOnlyMutex.RUnlock()
	return len(fake.keepOnlyArgsForCall)
}

func (fake *FakeApplier) KeepOnlyArgsForCall(i int) []models.Job {
	fake.keepOnlyMutex.RLock()
	defer fake.keepOnlyMutex.RUnlock()
	return fake.keepOnlyArgsForCall[i].jobs
}

func (fake *FakeApplier) KeepOnlyReturns(result1 error) {
	fake.KeepOnlyStub = nil
	fake.keepOnlyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeApplier) CreateDirectories(job models.Job, baseDir string) error {
	fake.createDirectoriesMutex.Lock()
	fake.createDirectoriesArgsForCall = append(fake.createDirectoriesArgsForCall, struct {
		job     models.Job
		baseDir string
	}{job, baseDir})
	fake.recordInvocation("CreateDirectories", []interface{}{job, baseDir})
	fake.createDirectoriesMutex.Unlock()
	if fake.CreateDirectoriesStub != nil {
		return fake.CreateDirectoriesStub(job, baseDir)
	} else {
		return fake.createDirectoriesReturns.result1
	}
}

func (fake *FakeApplier) CreateDirectoriesCallCount() int {
	fake.createDirectoriesMutex.RLock()
	defer fake.createDirectoriesMutex.RUnlock()
	return len(fake.createDirectoriesArgsForCall)
}

func (fake *FakeApplier) CreateDirectoriesArgsForCall(i int) (models.Job, string) {
	fake.createDirectoriesMutex.RLock()
	defer fake.createDirectoriesMutex.RUnlock()
	return fake.createDirectoriesArgsForCall[i].job, fake.createDirectoriesArgsForCall[i].baseDir
}

func (fake *FakeApplier) CreateDirectoriesReturns(result1 error) {
	fake.CreateDirectoriesStub = nil
	fake.createDirectoriesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeApplier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.prepareMutex.RLock()
	defer fake.prepareMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	fake.keepOnlyMutex.RLock()
	defer fake.keepOnlyMutex.RUnlock()
	fake.createDirectoriesMutex.RLock()
	defer fake.createDirectoriesMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeApplier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ jobs.Applier = new(FakeApplier)
