// This file was generated by counterfeiter
package injectorfakes

import (
	"archive/zip"
	"os"
	"sync"

	"github.com/pivotal-cf/winfs-injector/injector"
)

type FakeExtractContainer struct {
	OpenReaderStub        func(string) (*zip.ReadCloser, error)
	openReaderMutex       sync.RWMutex
	openReaderArgsForCall []struct {
		arg1 string
	}
	openReaderReturns struct {
		result1 *zip.ReadCloser
		result2 error
	}
	openReaderReturnsOnCall map[int]struct {
		result1 *zip.ReadCloser
		result2 error
	}
	WriteFileStub        func(filename string, data []byte, perm os.FileMode) error
	writeFileMutex       sync.RWMutex
	writeFileArgsForCall []struct {
		filename string
		data     []byte
		perm     os.FileMode
	}
	writeFileReturns struct {
		result1 error
	}
	writeFileReturnsOnCall map[int]struct {
		result1 error
	}
	TempDirStub        func(string, string) (string, error)
	tempDirMutex       sync.RWMutex
	tempDirArgsForCall []struct {
		arg1 string
		arg2 string
	}
	tempDirReturns struct {
		result1 string
		result2 error
	}
	tempDirReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	MkdirAllStub        func(path string, perm os.FileMode) error
	mkdirAllMutex       sync.RWMutex
	mkdirAllArgsForCall []struct {
		path string
		perm os.FileMode
	}
	mkdirAllReturns struct {
		result1 error
	}
	mkdirAllReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExtractContainer) OpenReader(arg1 string) (*zip.ReadCloser, error) {
	fake.openReaderMutex.Lock()
	ret, specificReturn := fake.openReaderReturnsOnCall[len(fake.openReaderArgsForCall)]
	fake.openReaderArgsForCall = append(fake.openReaderArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("OpenReader", []interface{}{arg1})
	fake.openReaderMutex.Unlock()
	if fake.OpenReaderStub != nil {
		return fake.OpenReaderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.openReaderReturns.result1, fake.openReaderReturns.result2
}

func (fake *FakeExtractContainer) OpenReaderCallCount() int {
	fake.openReaderMutex.RLock()
	defer fake.openReaderMutex.RUnlock()
	return len(fake.openReaderArgsForCall)
}

func (fake *FakeExtractContainer) OpenReaderArgsForCall(i int) string {
	fake.openReaderMutex.RLock()
	defer fake.openReaderMutex.RUnlock()
	return fake.openReaderArgsForCall[i].arg1
}

func (fake *FakeExtractContainer) OpenReaderReturns(result1 *zip.ReadCloser, result2 error) {
	fake.OpenReaderStub = nil
	fake.openReaderReturns = struct {
		result1 *zip.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeExtractContainer) OpenReaderReturnsOnCall(i int, result1 *zip.ReadCloser, result2 error) {
	fake.OpenReaderStub = nil
	if fake.openReaderReturnsOnCall == nil {
		fake.openReaderReturnsOnCall = make(map[int]struct {
			result1 *zip.ReadCloser
			result2 error
		})
	}
	fake.openReaderReturnsOnCall[i] = struct {
		result1 *zip.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeExtractContainer) WriteFile(filename string, data []byte, perm os.FileMode) error {
	var dataCopy []byte
	if data != nil {
		dataCopy = make([]byte, len(data))
		copy(dataCopy, data)
	}
	fake.writeFileMutex.Lock()
	ret, specificReturn := fake.writeFileReturnsOnCall[len(fake.writeFileArgsForCall)]
	fake.writeFileArgsForCall = append(fake.writeFileArgsForCall, struct {
		filename string
		data     []byte
		perm     os.FileMode
	}{filename, dataCopy, perm})
	fake.recordInvocation("WriteFile", []interface{}{filename, dataCopy, perm})
	fake.writeFileMutex.Unlock()
	if fake.WriteFileStub != nil {
		return fake.WriteFileStub(filename, data, perm)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.writeFileReturns.result1
}

func (fake *FakeExtractContainer) WriteFileCallCount() int {
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	return len(fake.writeFileArgsForCall)
}

func (fake *FakeExtractContainer) WriteFileArgsForCall(i int) (string, []byte, os.FileMode) {
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	return fake.writeFileArgsForCall[i].filename, fake.writeFileArgsForCall[i].data, fake.writeFileArgsForCall[i].perm
}

func (fake *FakeExtractContainer) WriteFileReturns(result1 error) {
	fake.WriteFileStub = nil
	fake.writeFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeExtractContainer) WriteFileReturnsOnCall(i int, result1 error) {
	fake.WriteFileStub = nil
	if fake.writeFileReturnsOnCall == nil {
		fake.writeFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeExtractContainer) TempDir(arg1 string, arg2 string) (string, error) {
	fake.tempDirMutex.Lock()
	ret, specificReturn := fake.tempDirReturnsOnCall[len(fake.tempDirArgsForCall)]
	fake.tempDirArgsForCall = append(fake.tempDirArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("TempDir", []interface{}{arg1, arg2})
	fake.tempDirMutex.Unlock()
	if fake.TempDirStub != nil {
		return fake.TempDirStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.tempDirReturns.result1, fake.tempDirReturns.result2
}

func (fake *FakeExtractContainer) TempDirCallCount() int {
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	return len(fake.tempDirArgsForCall)
}

func (fake *FakeExtractContainer) TempDirArgsForCall(i int) (string, string) {
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	return fake.tempDirArgsForCall[i].arg1, fake.tempDirArgsForCall[i].arg2
}

func (fake *FakeExtractContainer) TempDirReturns(result1 string, result2 error) {
	fake.TempDirStub = nil
	fake.tempDirReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeExtractContainer) TempDirReturnsOnCall(i int, result1 string, result2 error) {
	fake.TempDirStub = nil
	if fake.tempDirReturnsOnCall == nil {
		fake.tempDirReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.tempDirReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeExtractContainer) MkdirAll(path string, perm os.FileMode) error {
	fake.mkdirAllMutex.Lock()
	ret, specificReturn := fake.mkdirAllReturnsOnCall[len(fake.mkdirAllArgsForCall)]
	fake.mkdirAllArgsForCall = append(fake.mkdirAllArgsForCall, struct {
		path string
		perm os.FileMode
	}{path, perm})
	fake.recordInvocation("MkdirAll", []interface{}{path, perm})
	fake.mkdirAllMutex.Unlock()
	if fake.MkdirAllStub != nil {
		return fake.MkdirAllStub(path, perm)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.mkdirAllReturns.result1
}

func (fake *FakeExtractContainer) MkdirAllCallCount() int {
	fake.mkdirAllMutex.RLock()
	defer fake.mkdirAllMutex.RUnlock()
	return len(fake.mkdirAllArgsForCall)
}

func (fake *FakeExtractContainer) MkdirAllArgsForCall(i int) (string, os.FileMode) {
	fake.mkdirAllMutex.RLock()
	defer fake.mkdirAllMutex.RUnlock()
	return fake.mkdirAllArgsForCall[i].path, fake.mkdirAllArgsForCall[i].perm
}

func (fake *FakeExtractContainer) MkdirAllReturns(result1 error) {
	fake.MkdirAllStub = nil
	fake.mkdirAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeExtractContainer) MkdirAllReturnsOnCall(i int, result1 error) {
	fake.MkdirAllStub = nil
	if fake.mkdirAllReturnsOnCall == nil {
		fake.mkdirAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mkdirAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeExtractContainer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openReaderMutex.RLock()
	defer fake.openReaderMutex.RUnlock()
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	fake.mkdirAllMutex.RLock()
	defer fake.mkdirAllMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeExtractContainer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ injector.ExtractContainer = new(FakeExtractContainer)
